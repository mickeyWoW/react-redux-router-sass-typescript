import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';

import { login, UserInfo } from '../../apis/users';
import { RootState } from '../store';

export interface UserState {
	userInfo: UserInfo | null;
	status: 'pending' | 'success' | 'error';
}

const initialState: UserState = {
	userInfo: null, 
	status: 'success'
};

export const userLogin = createAsyncThunk(
	'user/login',
	async () => {
		const response = await login('a', 'a');
		return response.data;
	}
);

export const userSlice = createSlice({
	name: 'user',
	initialState,
	reducers: {
		// Use the PayloadAction type to declare the contents of `action.payload`
		userLogout: (state, action: PayloadAction<UserInfo>) => {
			state.userInfo = null;
		},
	},
	// The `extraReducers` field lets the slice handle actions defined elsewhere,
	// including actions generated by createAsyncThunk or in other slices.
	extraReducers: (builder) => {
		builder
			.addCase(userLogin.pending, (state) => {
				state.status = 'pending';
			})
			.addCase(userLogin.fulfilled, (state, action) => {
				state.status = 'success';
				state.userInfo = action.payload;
			})
			.addCase(userLogin.rejected, (state) => {
				state.status = 'error';
				state.userInfo = null;
			});
	},
});

export const { userLogout } = userSlice.actions;

export const getLoginedUserInfo = (state: RootState) => state.user.userInfo;

export default userSlice.reducer;
